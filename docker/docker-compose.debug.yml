version: '3.8'
services:
  app-on-dev:
    image: "${APP_IMAGE:-nestjs-app}:dev-latest"
    build:
      context: ..
      dockerfile: Dockerfile
      target: dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ../:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "${APP_HOST_PORT:-3000}:${APP_PORT:-3000}"
    command: ["npx", "ts-node-dev", "--respawn", "--transpile-only", "--ignore-watch", "node_modules", "src/main.ts"]
    depends_on:
      - db
      - redis       

  app-on-test:
    image: "${APP_IMAGE:-nestjs-app}:test-latest"
    build:
      context: ..
      dockerfile: Dockerfile
      target: test
    environment:
      - NODE_ENV=test
      - DATABASE_URL=${DATABASE_URL}      
    ports:
      - "${TEST_HOST_PORT:-3001}:${APP_PORT:-3000}"
    command: ["node", "dist/main.js"]
    depends_on:
      - db
      - redis     

  db:
    image: "${POSTGRES_IMAGE:-docker.io/library/postgres:latest}"
    ports:
      - "${DB_HOST_PORT:-5432}:${DB_PORT:-5432}"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: "${REDIS_IMAGE:-docker.io/library/redis:7}"
    ports:
      - "${REDIS_HOST_PORT:-6379}:${REDIS_APP_PORT:-6379}"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]      
    volumes:
      - redis_data:/data

volumes:
  redis_data:
  db_data: